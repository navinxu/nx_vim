"" YCM configurations
" source ~/.vim/ycm-config.vim
""" END of YCM configurations


" """ Lokaltog/vim-powerline
"     """set rtp+=~/.local/lib/python2.7/site-packages/powerline/bindings/vim/
"     set rtp+=~/.local/lib/python3.8/site-packages/powerline/bindings/vim/
"     set laststatus=1
"     set t_Co=256
"     "set statusline+=%{strftime(\"%m-%d\ %H:%M\")}
"     let g:Powerline_symbols = 'fancy'
" """ END of Lokaltog/vim-powerline

""" airline config
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#left_sep = ' '
    let g:airline#extensions#tabline#left_alt_sep = '|'
    " let g:airline#extensions#tabline#formatter = 'default'
    let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
    let g:airline_powerline_fonts = 1
    let g:airline_theme="papercolor"
    
"""  END of airline config


""" nerdtree
    " 当 Vim 启动时自动开启 NERDTree
    autocmd vimenter * NERDTree
    " 当目录中没有文件时打开 Vim，自动开启
    autocmd StdinReadPre * let s:std_in=1
    autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

    " 当 Vim 打开的是一个目录时
    autocmd StdinReadPre * let s:std_in=1
    autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | enew | endif

    " 当只剩下最后一个窗口（buffer）时
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

    " NERDTree 开关
    map <C-n> :NERDTreeToggle<CR>

    " 目录的箭头符号
    let g:NERDTreeDirArrowExpandable = '▸'
    let g:NERDTreeDirArrowCollapsible = '▾'

    " 窗口宽度
    let g:NERDTreeWinSize = 25

    " 显示隐藏文件
    let NERDTreeShowHidden=1

    " 显示行号
    let NERDTreeShowLineNumbers=1

    " 去除第一行的帮助提示
    "let NERDTreeMinimalUI=1

    " 当前目录的设定
    let NERDTreeChDirMode=2

    let NERDTreeIgnore = ['\.pyc$', '\.swp', '\.swo', '\.vscode', '__pycache__', '\.class', '\.out']

"  END of nerdtree


""" scrooloose/nerdcommenter
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1

" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '//','right': '','leftAlt': '/* ', 'rightAlt': ' */' } }
"let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not 
let g:NERDToggleCheckAllLines = 1
let g:NERDCommenterAltDelims = 1
"  END of scrooloose/nerdcommenter

" tagbar
    nmap <C-m> :TagbarToggle<CR>
    " 设定与 NERDTree 的分布
    let g:tagbar_vertical = 25
    " 设置 tagbar 子窗口的位置出现在主编辑区的左边
    let tagbar_left=0
    " 编辑代码时，在自动追踪变量
    let g:tagbar_autoshowtag=1
    " 自动启动
    autocmd VimEnter * nested :TagbarOpen
    wincmd l
    " 禁止打开 Vim 光标定位到 NERDTree 区域
    autocmd VimEnter * wincmd l
    " 设置显示／隐藏标签列表子窗口的快捷键。速记：identifier list by tag
    nnoremap <Leader>ilt :TagbarToggle<CR>
    " 设置标签子窗口的宽度
    " 这里设置与 NERDTree 相同的宽度
    let tagbar_width=25
    " tagbar 子窗口中不显示冗余帮助信息
    let g:tagbar_compact=1
    " 设置 ctags 对哪些代码标识符生成标签
    let g:tagbar_type_cpp = {
        \ 'kinds' : [
             \ 'c:classes:0:1',
             \ 'd:macros:0:1',
             \ 'e:enumerators:0:0',
             \ 'f:functions:0:1',
             \ 'g:enumeration:0:1',
             \ 'l:local:0:1',
             \ 'm:members:0:1',
             \ 'n:namespaces:0:1',
             \ 'p:functions_prototypes:0:1',
             \ 's:structs:0:1',
             \ 't:typedefs:0:1',
             \ 'u:unions:0:1',
             \ 'v:global:0:1',
             \ 'x:external:0:1'
         \ ],
         \ 'sro'        : '::',
         \ 'kind2scope' : {
             \ 'g' : 'enum',
             \ 'n' : 'namespace',
             \ 'c' : 'class',
             \ 's' : 'struct',
             \ 'u' : 'union'
         \ },
         \ 'scope2kind' : {
             \ 'enum'      : 'g',
             \ 'namespace' : 'n',
             \ 'class'     : 'c',
             \ 'struct'    : 's',
             \ 'union'     : 'u'
         \ }
    \ }
" END of tagbar

" Syntastic " ALE 不用时开启
    "let g:syntastic_always_populate_loc_list = 1
    "let g:syntastic_auto_loc_list = 1
    "let g:syntastic_check_on_open = 1
    "let g:syntastic_check_on_wq = 0
    "" let g:syntastic_quiet_messages = { "level": "errors" }
    "let g:syntastic_error_symbol='>>'
    "let g:syntastic_warning_symbol='>'
    "let g:syntastic_enable_highlighting=1
    "let g:syntastic_cpp_compiler = 'gcc'
    "let g:syntastic_php_checkers = ['php']
    "" 使用pyflakes,速度比pylint快"
    "let g:syntastic_python_checkers=['pyflakes'] 
    "let g:syntastic_html_eslint_exec='eslint'
    "let g:syntastic_javascript_checkers=['eslint']
    "let g:syntastic_java_checkers = ['javac']
    "let g:syntastic_loc_list_height = 5
    ""自动跳转到发现的第一个错误或警告处
    "let g:syntastic_auto_jump = 1
    ""高亮错误
    "let g:syntastic_enable_highlighting=1
" END of Syntastic

""" ALE config
    "始终开启标志列
    let g:ale_sign_column_always = 1
    let g:ale_set_highlights = 0
    "自定义error和warning图标
    let g:ale_sign_error = '✗'
    let g:ale_sign_warning = '⚡'
    "在vim自带的状态栏中整合ale
    let g:ale_statusline_format = ['✗ %d', '⚡ %d', '✔ OK']
    "显示Linter名称,出错或警告等相关信息
    let g:ale_echo_msg_error_str = 'E'
    let g:ale_echo_msg_warning_str = 'W'
    let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
    "普通模式下，sp前往上一个错误或警告，sn前往下一个错误或警告
    nmap sp <Plug>(ale_previous_wrap)
    nmap sn <Plug>(ale_next_wrap)
    "<Leader>s触发/关闭语法检查
    nmap <Leader>s :ALEToggle<CR>
    "<Leader>d查看错误或警告的详细信息
    nmap <Leader>d :ALEDetail<CR>
    "使用clang对c和c++进行语法检查，对python使用pylint进行语法检查
    let g:ale_php_php_executable='/usr/bin/php'
    let g:ale_sh_shell_default_shell = 'bash'
    let g:ale_lint_on_enter = 0
    " let g:ale_writegood_executable = 'writegood'
    " let g:ale_writegood_use_global = 1
    let g:ale_markdown_mdl_executable = 'mdl'
    " 需要生成stylelint的配置文件
    let g:ale_linters = {
    \   'c++': ['clang'],
    \   'c': ['clang'],
    \   'java': ['javac'],
    \   'html': ['tidy'],
    \   'css': ['stylelint'], 
    \   'json': ['jsonlint'],
    \   'python': ['flake8'],
    \   'javascript': ['jshint', 'eslint'],
    \   'typescript': ['jshint', 'eslint'],
    \   'vim': ['vint'],
    \   'shell': ['shellcheck'],
    \   'markdown': ['mdl'],
    \}
""" END of ALE config

"" "let g:syntastic_error_symbol = 'err!'
"" "let g:syntastic_warning_symbol = '!'

"" jedi-vim
    " let g:jedi#auto_initalization = 1


""" cscope
    "-- Cscope setting --
    """""" if has('cscope')
    """"""     set cscopetagorder=1 "先搜索tags标签文件，再搜索cscope数据库
    """"""     set cscopetag "使用|:cstag|(:cs find g)，而不是缺省的:tag
    """"""     set cscopeverbose
    """"""     set cscopequickfix=s-,c-,d-,i-,t-,e-
    """"""     set cscopepathcomp=3
    """"""     set csprg=/usr/bin/cscope              "指定用来执行 cscope 的命令
    """""" 
    """"""     function! LoadCscope()
    """""" 	   set nocsverb                           "不显示添加数据库是否成功
    """""" 	   " add any database in current directory
    """""" 	   if filereadable("cscope.out")
    """""" 		  cs add cscope.out                   "添加cscope数据库
    """""" 	   endif
    """""" 	   set csverb                             "显示添加成功与否
    """"""     endfunction
    """"""     au BufEnter /* call LoadCscope()
    """""" 
    """"""     nnoremap T :cs find c <C-R>=expand("<cword>")<CR><CR>
    """"""     nnoremap t <C-]>
    """"""     "nnoremap gt <C-W><C-]>
    """"""     "nnoremap gT <C-W><C-]><C-W>T
    """"""     "
    """"""     
    """"""     autocmd FileType c nnoremap <silent> <leader>h :AsyncRun echo "Generating tags and cscope database..." &&
    """"""                         \ ctags -R --fields=+aimSl --c-kinds=+lpx --c++-kinds=+lpx --exclude=.svn
    """"""                         \ --exclude=.git --exclude=*.a --exclude=*.so && find . -iname '*.c' -o
    """"""                         \ -iname '*.cpp' -o -iname '*.h' -o -iname '*.hpp' 
    """"""                         \ > ./cscope.files && cscope -b -i ./cscope.files -f ./cscope.out &&
    """"""                         \ echo "Done." <cr><cr>
    """"""     autocmd FileType cpp nnoremap <silent> <leader>h :AsyncRun echo "Generating tags and cscope database..." &&
    """"""                         \ ctags -R --fields=+aimSl --c-kinds=+lpx --c++-kinds=+lpx --exclude=.svn
    """"""                         \ --exclude=.git --exclude=*.a --exclude=*.so && find . -iname '*.c' -o
    """"""                         \ -iname '*.cpp' -o -iname '*.h' -o -iname '*.hpp' -o -iname '*.cc'
    """"""                         \ > ./cscope.files && cscope -b -i ./cscope.files -f ./cscope.out &&
    """"""                         \ echo "Done." <cr><cr>
    """"""     autocmd FileType php nnoremap <silent> <leader>h :AsyncRun echo "Generating tags and cscope database..." &&
    """"""                         \ ctags -R --fields=+aimSl --exclude=.svn
    """"""                         \ --exclude=.git --exclude=*.a --exclude=*.so && find . 
    """"""                         \ -iname '*.php'  
    """"""                         \ > ./cscope.files && cscope -b -i ./cscope.files -f ./cscope.out &&
    """"""                         \ echo "Done." <cr><cr>
    """""" 
    """""" 
    """"""     cnoreabbrev csa cs add
    """"""     cnoreabbrev csf cs find
    """"""     cnoreabbrev csk cs kill
    """"""     cnoreabbrev csr cs reset
    """"""     cnoreabbrev css cs show
    """"""     cnoreabbrev csh cs help
    """"""     cnoreabbrev csc Cscope
    """"""     command! Cscope :call LoadCscope()
    """""" endif
"""END of -- Cscope setting --

""" nerdcommenter config
    let g:NERDSpaceDelims=1

""" dyng/ctrlsf.vim config
    let g:ctrlsf_default_view_mode = 'compact'

""" Ludovicchabant/vim-gutentags config
    " "set statusline+=%{gutentags#statusline()}
    " " 搜索工程目录的标志，碰到这些文件/目录就停止向上一级目录递归
    " let g:gutentags_project_root = ['Makefile', '.git', '.svn', '.project', '.eslintrc.js', '.root']
    " " 所生成的数据文件的名称
    " let g:gutentags_ctags_tagfile = '.tags'

    " " 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
    " let s:vim_tags = expand('~/.cache/tags')
    " let g:gutentags_cache_dir = s:vim_tags

    " " 配置 ctags 的参数
    " let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
    " let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
    " let g:gutentags_ctags_extra_args += ['--c-kinds=+px']

    " " 检测 ~/.cache/tags 不存在就新建
    " if !isdirectory(s:vim_tags)
    "    silent! call mkdir(s:vim_tags, 'p')
    " endif
""" END of ludovicchabant/vim-gutentags config

""" Begin of skywind3000/gutentags_plus config
"" enable gtags module
"" let g:gutentags_modules = ['ctags', 'gtags_cscope']
"" 同时开启 ctags 和 gtags 支持：
"let g:gutentags_modules = []
"if executable('ctags')
"	let g:gutentags_modules += ['ctags']
"endif
"if executable('gtags-cscope') && executable('gtags')
"	let g:gutentags_modules += ['gtags_cscope']
"endif
"
"" " generate datebases in my cache directory, prevent gtags files polluting my project
"let g:gutentags_cache_dir = expand('~/.cache/tags')
""
"" " change focus to quickfix window after search (optional).
"let g:gutentags_plus_switch = 1
""
"" " ERROR: gutentags: gtags-cscope job failed, returned: 1
"let g:gutentags_define_advanced_commands = 1
""" End of skywind3000/gutentags_plus config


""" sillybun/vim-repl
    nnoremap <leader>R :REPLToggle<Cr>
    let g:sendtorepl_invoke_key = "<leader>W"
    "0 represents bottom
    "1 represents top
    "2 represents left
    "3 represents right
    let g:repl_position = 0
    let g:repl_input_symbols = {
                \   'python': ['>>>', '>>>>', 'ipdb>', 'pdb', '...'],
                \   }
""" END of sillybun/vim-repl

" """ Deoplete
" let g:deoplete#enable_at_startup = 1
" let g:deoplete#ignore_sources = get(g:, 'deoplete#ignore_sources', {})
" let g:deoplete#ignore_sources.php = ['omni']
" " 禁用 phpcd 源
" " let g:deoplete#ignore_sources.php = ['phpcd', 'omni']
" "" If you use neosnippet, you may like to set:
" let g:phpcd_disable_modifier = 0
" """ END of Deoplete
"
" """ lvht/phpcd.vim config
" let g:phpcd_php_cli_executable = 'php7.2'
" """ END of lvht/phpcd.vim config


""" Autocomplete-flow Config
    let g:neosnippet#enable_completed_snippet = 1
    let g:autocomplete_flow#insert_paren_after_function = 0
""" END of Autocomplete-flow Config


" vim-javacomplete2 Config
autocmd FileType java setlocal omnifunc=javacomplete#Complete

" supertab Config
let g:SuperTabDefaultCompletionType = '<tab>'

" xolox/vim-session config
let g:session_autosave = 'yes'
let g:session_autoload = 'no'


" mbbill/undotree config
set undofile " Maintain undo history between sessions
" 设置你的undo保存位置，你需要先 mkdir ~/.vim/undodir
set undodir=~/.vim/undodir


" tenfyzhong/CompleteParameter.vim config
inoremap <silent><expr> ( complete_parameter#pre_complete("()")
nmap <c-j> <Plug>(complete_parameter#goto_next_parameter)
imap <c-j> <Plug>(complete_parameter#goto_next_parameter)
smap <c-j> <Plug>(complete_parameter#goto_next_parameter)

nmap <c-k> <Plug>(complete_parameter#goto_previous_parameter)
imap <c-k> <Plug>(complete_parameter#goto_previous_parameter)
smap <c-k> <Plug>(complete_parameter#goto_previous_parameter)
let g:complete_parameter_log_level = 5
let g:complete_parameter_use_ultisnips_mapping = 0
" need to set noshowmode or set cmdheight=2
let g:complete_parameter_echo_signature = 1

" octol/vim-cpp-enhanced-highlight config
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_experimental_simple_template_highlight = 1
let g:cpp_experimental_template_highlight = 1
let g:cpp_concepts_highlight = 1
let g:cpp_no_function_highlight = 1
"let c_no_curly_error=1
"



"" phpcomplete.vim config
"let g:phpcomplete_mappings = {
"   \ 'jump_to_def': '<C-]>',
"   \ 'jump_to_def_split': '<C-w><C-]>',
"   \ 'jump_to_def_vsplit': '<C-w><C-\>',
"   \ 'jump_to_def_tabnew': '<C-w><C-[>',
"   \}
"
"" phpcomplete_extened config
"" autocmd  FileType  php setlocal omnifunc=phpcomplete_extended#CompletePHP
"let g:phpcomplete_index_composer_command = '/usr/bin/composer'

" phpactor config
source ~/.vim/phpactor.conf.vim
" END of phpactor config



""" deoplete-phpactor  config
"let g:deoplete#sources = {}
"let g:deoplete#sources.php = ['omni', 'phpactor', 'ultisnips', 'buffer']
" END
"


""" indentLine config BEGIN
let g:indentLine_enabled = 1
let g:indentLine_setColors = '#A4E57E'
" Vim
let g:indentLine_color_term = 239

" GVim
let g:indentLine_color_gui = '#A4E57E'

" none X terminal
let g:indentLine_color_tty_light = 7 " (default: 4)
let g:indentLine_color_dark = 1 " (default: 2)

" Background (Vim, GVim)
let g:indentLine_bgcolor_term = 202
let g:indentLine_bgcolor_gui = '#FF5F00'
"let g:indentLine_char = 'c'
let g:indentLine_char_list = ['|', '¦', '┆', '┊']
let g:indentLine_concealcursor = 'inc'
let g:indentLine_conceallevel = 1
""" indentLine config END 


""" nathanaelkane/vim-indent-guides config BEGIN
    let g:indent_guides_enable_on_vim_startup = 0
    let g:indent_guides_auto_colors = 0
    autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=3
    autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4
""" nathanaelkane/vim-indent-guides config END 


""" Emmet Config
let g:user_emmet_mode='n'    "only enable normal mode functions.
let g:user_emmet_mode='inv'  "enable all functions, which is equal to
let g:user_emmet_mode='a'    "enable all function in all mode.
let g:user_emmet_install_global = 1
let g:user_emmet_leader_key='<C-Z>'
autocmd FileType html,css EmmetInstall


""" MaxMEllon/vim-jsx-pretty Config
let g:vim_jsx_pretty_template_tags = ['html', 'jsx']
let g:vim_jsx_pretty_colorful_config = 1 " default 0

" " vim-ranbow confin
" au FileType php,py,c,java,cpp,objc,objcpp call rainbow#load()
" let g:rainbow_active = 1
" let g:rainbow_active = 1
"
" let g:rainbow_load_separately = [
"     \ [ '*' , [['(', ')'], ['\[', '\]'], ['{', '}']] ],
"     \ [ '*.tex' , [['(', ')'], ['\[', '\]']] ],
"     \ [ '*.cpp' , [['(', ')'], ['\[', '\]'], ['{', '}']] ],
"     \ [ '*.{html,htm}' , [['(', ')'], ['\[', '\]'], ['{', '}'], ['<\a[^>]*>', '</[^>]*>']] ],
"     \ ]


" vimspell
" let SpellSetSpellchecker="ispell"
let spell_auto_type = "tex,mail,text,html,sgml,otl,cvs,cpp,c,php,java,js,h,none"
let spell_insert_mode = 1

""" let g:kite_auto_complete = 1
""" let g:kite_tab_complete=1
""" set completeopt+=menuone   " show the popup menu even when there is only 1 match
""" set completeopt+=noinsert  " don't insert any text until user chooses a match
""" set completeopt-=longest   " don't insert the longest common text
""" set completeopt+=preview
""" " autocmd CompleteDone * if !pumvisible() | pclose | endif
""" set belloff+=ctrlg  " if vim beeps during completion
""" set statusline=%<%f\ %h%m%r%{kite#statusline()}%=%-14.(%l,%c%V%)\ %P
""" set laststatus=2  " always display the status line
""" let g:kite_previous_placeholder = '<C-H>'
""" let g:kite_next_placeholder = '<C-L>'
""" let g:kite_snippets=1
""" 
""" set nofoldenable



" vim-css3-syntax Config BEGIN
augroup VimCSS3Syntax
  autocmd!

  autocmd FileType css setlocal iskeyword+=-
augroup END
"vim-css3-syntax Config END 


"" Shougo/neosnippet.vim Config
" Plugin key-mappings.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
"imap <expr><TAB>
" \ pumvisible() ? "\<C-n>" :
" \ neosnippet#expandable_or_jumpable() ?
" \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif

" Coc Config BEGIN
source ~/.vim/coc-default.conf.vim
source ~/.vim/coc-extensions.conf.vim

"" Select range based on AST
""nmap <silent><Leader>r <Plug>(coc-range-select)
""xmap <silent><Leader>r <Plug>(coc-range-select)
""
""" Navigations
""nmap <Leader>o <Plug>(coc-definition)
""nmap <Leader>O <Plug>(coc-type-definition)
""nmap <Leader>I <Plug>(coc-implementation)
""nmap <Leader>R <Plug>(coc-references)
""
""" Hover
""nmap K :call <SID>show_documentation()<CR>
""inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
""function! s:show_documentation()
""  if (index(['vim','help'], &filetype) >= 0)
""    execute 'h '.expand('<cword>')
""  else
""    call CocAction('doHover')
""  endif
""endfunction
""
""" Text objects for functions and classes (uses document symbol provider)
""xmap if <Plug>(coc-funcobj-i)
""omap if <Plug>(coc-funcobj-i)
""xmap af <Plug>(coc-funcobj-a)
""omap af <Plug>(coc-funcobj-a)
""xmap ic <Plug>(coc-classobj-i)
""omap ic <Plug>(coc-classobj-i)
""xmap ac <Plug>(coc-classobj-a)
""omap ac <Plug>(coc-classobj-a)
""autocmd CursorHold * silent call CocActionAsync('highlight')
""
""autocmd FileType php set iskeyword+=$

" Coc Config END 


" ncm2-phpactor config
""" source ~/.vim/ncm2-phpactor.conf.vim
