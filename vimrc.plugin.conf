"" YCM configurations
    " 触发代码标识符提示的字符数目（与语义提示无关）
    let g:ycm_min__num_of_chars_for_completion=0
    " 最小候选项字数,0 为不限制
    let g:ycm_min_num_identifier_candidate_chars=0
    " 语义候选项的最大数目
    let g:ycm_max_num_candidates = 50
    " 标识符候选项的最大数目
    let g:ycm_max_num_identifier_candidates=10
    " 标识符以及语言触发器自动触发
    " 当设为 0 时，將会关闭自动触发，
    " 此时需要通过快捷键手动触发标识符自动完成
    " 与语义自动完成无关
    " 如果需要关闭语义自动完成，可通过设置
    " g:ycm_min_num_of_chars_for_completion为一个大值，如99
    let g:ycm_auto_trigger = 1
    " 允许 YCM 的白名单 
    " 键是文件类型，值是任意的。
    let g:ycm_filetype_whitelist = { '*': 1 }
    
    " 不允许应用 YCM 的文件类型黑名单
    let g:ycm_filetype_blacklist = {
          \ 'tagbar' : 1,
          \ 'qf' : 1,
          \ 'notes' : 1,
          \ 'markdown' : 1,
          \ 'unite' : 1,
          \ 'text' : 1,
          \ 'pandoc' : 1,
          \ 'infolog' : 1,
          \ 'mail' : 1,
          \ 'minibufexpl' : 1,
          \ 'python' : 1,
          \ 'json' : 1,
          \ 'objcpp' : 1,
          \ 'perl' : 1,
          \ 'typescript' : 1
          \}
    
    " 禁用语义完成，标识符触发器无关
    let g:ycm_filetype_specific_completion_to_disable = {
          \ 'gitcommit': 1
          \}
    " 打开 YCM 的特征显示功能
    " 一旦启用，它会移除所有语法检查插件，
    " 因为有冲突。
    " 默认为1。如果不想使用 Clang 作为语义检查器，
    " 则禁用此选项。
    let g:ycm_show_diagnostics_ui = 1
    " 设置语法检查的错误符号
    " 会覆盖 g:syntastic_error_symbol 的值
    let g:ycm_error_symbol = '>>'
    " 警告符号
    " 会覆盖 g:syntastic_warning_symbol 的值
    let g:ycm_warning_symbol = '>>'
    " 打开/关闭 YcmErrorLine 和 YcmWarningLine 的高亮
    " 会覆盖 g:syntastic_enable_signs 的值
    " 默认值为 1
    let g:ycm_enable_diagnostic_signs = 1
    " 高亮 YCM 的诊断
    " 会覆盖 g:syntastic_enable_highlighting 的值
    let g:ycm_enable_diagnostic_highlighting = 1
    " 启用该选项的话，会当你的游标在有警告/错误的行上，
    " 会显示相关的信息
    " 会覆盖 g:syntastic_echo_current_error 的值
    " 默认值为1
    let g:ycm_echo_current_diagnostic = 1
    " 该选项决定哪些判断（diagnostics）
    " 会被 YCM 渲染。
    " "regex":接收一个 Python 正则，假若匹配到判断，
    " 那么上一层的文件类型会被匹配到，并且不会被渲染。
    """let g:ycm_filter_diagnostics = {
    """ \"java": {
    """ \     "regex": [ ".*taco.*", ... ],
    """ \     "level": "error",
    """ \     ...
    """ \   }
    """ \}
    
    " 自动弹出 location 列表以显示得到的判断结果数据
    " 默认为0,会覆盖 g:syntastic_always_populate_loc_list。
    " 启用有可能会与其他数据相冲突。
    let g:ycm_always_populate_location_list = 1
    " 有数据到达之时自动打开 location list
    " 默认为 1
    let g:ycm_open_loclist_on_ycm_diags = 1
    " 开启后 YCM 可以在注释中进行自动补全
    " 默认值为0
    let g:ycm_complete_in_comments = 1
    " YCM 在字符串中也可以自动补全
    " 默认值为1 
    let g:ycm_complete_in_strings = 1
    " 是否收集字符串和注释中的标识
    " 默认为0，建议保留默认。
    let g:ycm_collect_identifiers_from_comments_and_strings = 1
    " 是否收集 tags 文件的标识
    " 默认为0。只支持 ctags 产生的 tags。
    let g:ycm_collect_identifiers_from_tags_files = 1
    " 开启后收集编程语言的关键字
    " 默认为 0
    let g:ycm_seed_identifiers_with_syntax = 1
    " 从 Vim 获取 Vim 相关的数据。
    " 与.ycm_extra_conf.py 文件有关
    " 以下就是默认值。
    let g:ycm_extra_conf_vim_data = []
    " 指定 YCM 客户端所用的 Python 解释器
    " 如果编译时用的是Python3，那么这里的路径应是py3的路径
    let g:ycm_server_python_interpreter = '/usr/bin/python3'
    " YCM 和 ycmd 服务器的日志是否在关机时（会不会是退出Vim 时呢？）删除
    " 默认值为 0。
    let g:ycm_keep_logfiles = 0
    
    " 设定日志的级别，分别有debug,info,warning,error,critical。
    " 以上按顺序从最详细到最简单。
    " 默认为：info
    let g:ycm_log_level = 'info'
    
    " 如果编辑的是 C# 源文件，
    " 那么OmniSharp 服务器会启用。
    " 默认为 1
    let g:ycm_auto_start_csharp_server = 0
    
    " 是否在关闭 Vim 之后自动停止 Omnisharp 的服务
    " 默认为 1
    let g:ycm_auto_stop_csharp_server = 1
    
    " 指定 OminiSharp 服务端的监听端口
    " 如果该选项值为 0,则随机使用当前
    " 未分配的端口
    let g:ycm_csharp_server_port = 0
    
    " Csharp，本人表示不懂。
    let g:ycm_csharp_insert_namespace_expr = ''
    
    " preview 用来呈现语义完成的详细函数信息 
    " 默认为0。如果设为1,且 Vim 的 Completeopt 选项
    " 已有 preview，那么该设置无效。
    let g:ycm_add_preview_to_completeopt = 1
    
    " YCM的previw窗口比较恼人，还是关闭比较好
    set completeopt-=preview
    
    " 当 YCM 完成函数的提示之后是否自动关闭 preview 窗口
    " 默认为0。与 g:ycm_add_preview_to_completeopt 有关。
    let g:ycm_autoclose_preview_window_after_completion = 0
    
    " 当用户离开 Vim 的插入（insert）模式之后是否自动关闭 preview 窗口。
    " 当g:ycm_autoclose_preview_window_after_completion 不为默认值或者没有
    " preview 窗口中触发之时该选项无效。
    " 默认值为 0。
    let g:ycm_autoclose_preview_window_after_insertion = 1
    
    " 此选项控制展示判断（dianostics）的最大数目，
    " 也就是错误或者警告。只对 C 家族的语言有效。
    " 默认为 30
    let g:ycm_max_diagnostics_to_display = 20
    
    " 绑定快捷键从而选择第一个自动完成选项。
    " 该快捷键可以无限重复循环选择候选项。
    " 默认为['<TAB>', '<Down>']。有人用 <Enter>。
    let g:ycm_key_list_select_completion = ['<TAB>', '<Down>']
    
    " 选择上一个候选项。
    " 默认为：['<S-TAB>', '<Up>']，S 指 Shift 键。
    let g:ycm_key_list_previous_completion = ['<S-TAB>', '<Up>']
    
    " 让候选项列表消失。
    " 默认为：['<C-y>']
    let g:ycm_key_list_stop_completion = ['<C-y>']
    
    " 使用绑定的快捷键触发激活语义完成列表，
    " 就是 ., ->, :: 等等语义触发条件。
    " 默认值为：<C-Space>。
    " 若设为空字符串，那么确保没有创建快捷键。
    let g:ycm_key_invoke_completion = '<C-g>'
    
    " 绑定快捷键展示全部的判断
    " 默认为：<leader>d。
    " 如果为空字串，则表示没有映射快捷键。
    let g:ycm_key_detailed_diagnostics = '<leader>d'
    
    " 指定一个全局的 .ycm_extra_conf.py 文件，
    " 从而在没有找到此文件时应用。
    " 默认值：''
    let g:ycm_global_ycm_extra_conf = '~/.vim/ycm_extra_conf.py'
    "let g:ycm_global_ycm_extra_conf = '~/.vim/bundles/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py'
    if &filetype == 'c'
        let g:ycm_global_ycm_extra_conf = '~/.vim/ycm_extra_conf-c.py'
    elseif &filetype == 'cpp'
        let g:ycm_global_ycm_extra_conf = '~/.vim/ycm_extra_conf-cpp.py'
    else
        let g:ycm_global_ycm_extra_conf = '~/.vim/ycm_extra_conf.py'
    endif
    
    
    " 將该项的值设为 1,则 YCM 会在应用 .ycm_extra_conf.py 
    " 之前确认使用哪一个文件。
    " 默认值为：1
    let g:ycm_confirm_extra_conf = 1
    
    " 此选项包含一个元素为正则模式的列表，
    " 该列表决定是否应用特定的 .ycm_extra_conf.py，
    " 或者將其列入黑名单。
    " 具体用法请查阅 README 文档。
    " 默认值为：[]
    "" let g:ycm_extra_conf_globlist = ['~/dev/*','!~/*']
    let g:ycm_extra_conf_globlist = []
    
    " 是否使用 Vim 此时的工作目录为当前目录，
    " 抑或以当前窗口或缓冲区为当前目录进行相对路径的处理。
    " 默认值为：0，表示否。
    let g:ycm_filepath_completion_use_working_dir = 0
    
    " 
    " re!\S{2,} 表示从第二个字开始提示
    "
    let g:ycm_semantic_triggers =  {
      \   'c' : ['->', '.', 're!\w{1}'],
      \   'objc' : ['->', '.', 're!\[[_a-zA-Z]+\w*\s', 're!^\s*[^\W\d]\w*\s',
      \             're!\[.*\]\s'],
      \   'ocaml' : ['.', '#'],
      \   'cpp,objcpp' : ['->', '.', '::', 're!\w{1}'],
      \   'perl' : ['->'],
      \   'php' : ['->', '::', 're!\w{1}'],
      \   'cs,java,javascript,typescript,d,python,perl6,scala,vb,elixir,go' : ['.', 're!\w{1}'],
      \   'ruby' : ['.', '::'],
      \   'lua' : ['.', ':'],
      \   'erlang' : [':'],
      \   'java' : ['.', 're!\w{1}'],
      \ }
    
    "
    " 指定用于运行 jedi 以及 ycmd 的 Python 解释器
    " 默认值为：''
    let g:ycm_python_binary_path = '/usr/bin/python3'
""" END of YCM configurations


""" Lokaltog/vim-powerline
    """set rtp+=~/.local/lib/python2.7/site-packages/powerline/bindings/vim/
    set rtp+=~/.local/lib/python3.6/site-packages/powerline/bindings/vim/
    set laststatus=2
    set t_Co=256
    "set statusline+=%{strftime(\"%m-%d\ %H:%M\")}
    let g:Powerline_symbols = 'fancy'
""" END of Lokaltog/vim-powerline

""" airline config
    "let g:airline#extensions#tabline#enabled = 1
    "let g:airline#extensions#tabline#left_sep = ' '
    "let g:airline#extensions#tabline#left_alt_sep = '|'
    "let g:airline#extensions#tabline#formatter = 'default'
    "let g:airline_powerline_fonts = 1
"""  END of airline config


""" nerdtree
    " 当 Vim 启动时自动开启 NERDTree
    autocmd vimenter * NERDTree
    " 当目录中没有文件时打开 Vim，自动开启
    autocmd StdinReadPre * let s:std_in=1
    autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
    
    " 当 Vim 打开的是一个目录时
    autocmd StdinReadPre * let s:std_in=1
    autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
    
    " 当只剩下最后一个窗口（buffer）时
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
    
    " NERDTree 开关
    map <C-n> :NERDTreeToggle<CR>
    
    " 目录的箭头符号
    let g:NERDTreeDirArrowExpandable = '▸'
    let g:NERDTreeDirArrowCollapsible = '▾'
    
    " 窗口宽度
    let g:NERDTreeWinSize = 25
    
    " 显示隐藏文件
    let NERDTreeShowHidden=1
    
    " 显示行号
    let NERDTreeShowLineNumbers=1

    " 去除第一行的帮助提示
    "let NERDTreeMinimalUI=1
    
    " 当前目录的设定
    let NERDTreeChDirMode=2

    let NERDTreeIgnore = ['\.pyc$', '\.swp', '\.swo', '\.vscode', '__pycache__', '\.class', '\.out']

"  END of nerdtree


""" scrooloose/nerdcommenter
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1

" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '//','right': '','leftAlt': '/* ', 'rightAlt': ' */' } }
"let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not 
let g:NERDToggleCheckAllLines = 1
let g:NERDCommenterAltDelims = 1
"  END of scrooloose/nerdcommenter

" tagbar
    nmap <C-m> :TagbarToggle<CR>
    " 设定与 NERDTree 的分布
    let g:tagbar_vertical = 25
    " 设置 tagbar 子窗口的位置出现在主编辑区的左边
    let tagbar_left=0
    " 编辑代码时，在自动追踪变量
    let g:tagbar_autoshowtag=1
    " 自动启动
    autocmd VimEnter * nested :TagbarOpen
    wincmd l
    " 禁止打开 Vim 光标定位到 NERDTree 区域
    autocmd VimEnter * wincmd l
    " 设置显示／隐藏标签列表子窗口的快捷键。速记：identifier list by tag
    nnoremap <Leader>ilt :TagbarToggle<CR>
    " 设置标签子窗口的宽度
    " 这里设置与 NERDTree 相同的宽度
    let tagbar_width=25
    " tagbar 子窗口中不显示冗余帮助信息
    let g:tagbar_compact=1
    " 设置 ctags 对哪些代码标识符生成标签
    let g:tagbar_type_cpp = {
        \ 'kinds' : [
             \ 'c:classes:0:1',
             \ 'd:macros:0:1',
             \ 'e:enumerators:0:0',
             \ 'f:functions:0:1',
             \ 'g:enumeration:0:1',
             \ 'l:local:0:1',
             \ 'm:members:0:1',
             \ 'n:namespaces:0:1',
             \ 'p:functions_prototypes:0:1',
             \ 's:structs:0:1',
             \ 't:typedefs:0:1',
             \ 'u:unions:0:1',
             \ 'v:global:0:1',
             \ 'x:external:0:1'
         \ ],
         \ 'sro'        : '::',
         \ 'kind2scope' : {
             \ 'g' : 'enum',
             \ 'n' : 'namespace',
             \ 'c' : 'class',
             \ 's' : 'struct',
             \ 'u' : 'union'
         \ },
         \ 'scope2kind' : {
             \ 'enum'      : 'g',
             \ 'namespace' : 'n',
             \ 'class'     : 'c',
             \ 'struct'    : 's',
             \ 'union'     : 'u'
         \ }
    \ }
" END of tagbar

" Syntastic " ALE 不用时开启
    "let g:syntastic_always_populate_loc_list = 1
    "let g:syntastic_auto_loc_list = 1
    "let g:syntastic_check_on_open = 1
    "let g:syntastic_check_on_wq = 0
    "" let g:syntastic_quiet_messages = { "level": "errors" }
    "let g:syntastic_error_symbol='>>'
    "let g:syntastic_warning_symbol='>'
    "let g:syntastic_enable_highlighting=1
    "let g:syntastic_cpp_compiler = 'gcc'
    "let g:syntastic_php_checkers = ['php']
    "" 使用pyflakes,速度比pylint快"
    "let g:syntastic_python_checkers=['pyflakes'] 
    "let g:syntastic_html_eslint_exec='eslint'
    "let g:syntastic_javascript_checkers=['eslint']
    "let g:syntastic_java_checkers = ['javac']
    "let g:syntastic_loc_list_height = 5
    ""自动跳转到发现的第一个错误或警告处
    "let g:syntastic_auto_jump = 1
    ""高亮错误
    "let g:syntastic_enable_highlighting=1
" END of Syntastic

""" ALE config
    "始终开启标志列
    let g:ale_sign_column_always = 1
    let g:ale_set_highlights = 0
    "自定义error和warning图标
    let g:ale_sign_error = '✗'
    let g:ale_sign_warning = '⚡'
    "在vim自带的状态栏中整合ale
    let g:ale_statusline_format = ['✗ %d', '⚡ %d', '✔ OK']
    "显示Linter名称,出错或警告等相关信息
    let g:ale_echo_msg_error_str = 'E'
    let g:ale_echo_msg_warning_str = 'W'
    let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
    "普通模式下，sp前往上一个错误或警告，sn前往下一个错误或警告
    nmap sp <Plug>(ale_previous_wrap)
    nmap sn <Plug>(ale_next_wrap)
    "<Leader>s触发/关闭语法检查
    nmap <Leader>s :ALEToggle<CR>
    "<Leader>d查看错误或警告的详细信息
    nmap <Leader>d :ALEDetail<CR>
    "使用clang对c和c++进行语法检查，对python使用pylint进行语法检查
    let g:ale_php_php_executable='/usr/bin/php'
    let g:ale_sh_shell_default_shell = 'bash'
    let g:ale_lint_on_enter = 0
    " 需要生成stylelint的配置文件
    let g:ale_linters = {
    \   'c++': ['clang'],
    \   'c': ['clang'],
    \   'python': ['flake8'],
    \   'java': ['javac'],
    \   'html': ['tidy'],
    \   'css': ['stylelint'], 
    \   'json': ['jsonlint'],
    \   'php': ['php'],
    \   'javascript': ['eslint'],
    \   'typescript': ['eslint'],
    \   'vim': ['vint'],
    \   'shell': ['shellcheck'],
    \   'markdown': ['textlint'],
    \}
""" END of ALE config

"" "let g:syntastic_error_symbol = 'err!'
"" "let g:syntastic_warning_symbol = '!'

"" jedi-vim
    let g:jedi#auto_initalization = 1


""" cscope
    "-- Cscope setting --
    if has('cscope')
        set cscopetagorder=1 "先搜索tags标签文件，再搜索cscope数据库
        set cscopetag "使用|:cstag|(:cs find g)，而不是缺省的:tag
        set cscopeverbose
        set cscopequickfix=s-,c-,d-,i-,t-,e-
        set cscopepathcomp=3
        set csprg=/usr/bin/cscope              "指定用来执行 cscope 的命令
    
        function! LoadCscope()
    	   set nocsverb                           "不显示添加数据库是否成功
    	   " add any database in current directory
    	   if filereadable("cscope.out")
    		  cs add cscope.out                   "添加cscope数据库
    	   endif
    	   set csverb                             "显示添加成功与否
        endfunction
        au BufEnter /* call LoadCscope()
    
        nnoremap T :cs find c <C-R>=expand("<cword>")<CR><CR>
        nnoremap t <C-]>
        "nnoremap gt <C-W><C-]>
        "nnoremap gT <C-W><C-]><C-W>T
        "
        
        autocmd FileType c nnoremap <silent> <leader>h :AsyncRun echo "Generating tags and cscope database..." &&
                            \ ctags -R --fields=+aimSl --c-kinds=+lpx --c++-kinds=+lpx --exclude=.svn
                            \ --exclude=.git --exclude=*.a --exclude=*.so && find . -iname '*.c' -o
                            \ -iname '*.cpp' -o -iname '*.h' -o -iname '*.hpp' 
                            \ > ./cscope.files && cscope -b -i ./cscope.files -f ./cscope.out &&
                            \ echo "Done." <cr><cr>
        autocmd FileType cpp nnoremap <silent> <leader>h :AsyncRun echo "Generating tags and cscope database..." &&
                            \ ctags -R --fields=+aimSl --c-kinds=+lpx --c++-kinds=+lpx --exclude=.svn
                            \ --exclude=.git --exclude=*.a --exclude=*.so && find . -iname '*.c' -o
                            \ -iname '*.cpp' -o -iname '*.h' -o -iname '*.hpp' -o -iname '*.cc'
                            \ > ./cscope.files && cscope -b -i ./cscope.files -f ./cscope.out &&
                            \ echo "Done." <cr><cr>
        autocmd FileType php nnoremap <silent> <leader>h :AsyncRun echo "Generating tags and cscope database..." &&
                            \ ctags -R --fields=+aimSl --exclude=.svn
                            \ --exclude=.git --exclude=*.a --exclude=*.so && find . 
                            \ -iname '*.php'  
                            \ > ./cscope.files && cscope -b -i ./cscope.files -f ./cscope.out &&
                            \ echo "Done." <cr><cr>
    
    
        cnoreabbrev csa cs add
        cnoreabbrev csf cs find
        cnoreabbrev csk cs kill
        cnoreabbrev csr cs reset
        cnoreabbrev css cs show
        cnoreabbrev csh cs help
        cnoreabbrev csc Cscope
        command! Cscope :call LoadCscope()
    endif
"""END of -- Cscope setting --

""" nerdcommenter config
    let g:NERDSpaceDelims=1

""" dyng/ctrlsf.vim config
    let g:ctrlsf_default_view_mode = 'compact'

""" Ludovicchabant/vim-gutentags config
    "set statusline+=%{gutentags#statusline()}
    " 搜索工程目录的标志，碰到这些文件/目录就停止向上一级目录递归
    let g:gutentags_project_root = ['Makefile', '.git', '.svn', '.project', '.eslintrc.js']
    " 所生成的数据文件的名称
    let g:gutentags_ctags_tagfile = '.tags'
    
    " 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
    let s:vim_tags = expand('~/.cache/tags')
    let g:gutentags_cache_dir = s:vim_tags
    
    " 配置 ctags 的参数
    let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
    let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
    let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
    
    " 检测 ~/.cache/tags 不存在就新建
    if !isdirectory(s:vim_tags)
       silent! call mkdir(s:vim_tags, 'p')
    endif
""" END of ludovicchabant/vim-gutentags config



""" sillybun/vim-repl
    nnoremap <leader>R :REPLToggle<Cr>
    let g:sendtorepl_invoke_key = "<leader>W"
    "0 represents bottom
    "1 represents top
    "2 represents left
    "3 represents right
    let g:repl_position = 0
    let g:repl_input_symbols = {
                \   'python': ['>>>', '>>>>', 'ipdb>', 'pdb', '...'],
                \   }
""" END of sillybun/vim-repl

""" Deoplete and phpcd.vim config
    """set encoding=utf-8
    """set pyxversion=3
    """let g:python3_host_prog = '/usr/bin/python3.6'

    """"" deoplete config
    """let g:deoplete#enable_at_startup = 1
    """"let g:deoplete#ignore_sources = get(g:, 'deoplete#ignore_sources', {})
    """"let g:deoplete#ignore_sources.php = ['omni']
    """
    """" phpcd.vim config
    """    "let g:deoplete#ignore_sources.php = ['phpcd', 'omni']
    """    "let g:phpcd_autoload_path = '.autoload.php'
    """    let g:phpcd_php_cli_executable = 'php'
    """    let g:phpcd_disable_modifier = 1
    """
    """    
    """    "autocmd FileType php setlocal omnifunc=phpcd#CompletePHP
""" END of Deoplete and phpcd.vim config

""" Autocomplete-flow Config
    let g:neosnippet#enable_completed_snippet = 1
    let g:autocomplete_flow#insert_paren_after_function = 0
""" END of Autocomplete-flow Config


" vim-javacomplete2 Config
autocmd FileType java setlocal omnifunc=javacomplete#Complete

" supertab Config
let g:SuperTabDefaultCompletionType = '<tab>'

" xolox/vim-session config
let g:session_autosave = 'yes'
let g:session_autoload = 'no'


" mbbill/undotree config
set undofile " Maintain undo history between sessions
" 设置你的undo保存位置，你需要先 mkdir ~/.vim/undodir
set undodir=~/.vim/undodir


" tenfyzhong/CompleteParameter.vim config
inoremap <silent><expr> ( complete_parameter#pre_complete("()")
nmap <c-j> <Plug>(complete_parameter#goto_next_parameter)
imap <c-j> <Plug>(complete_parameter#goto_next_parameter)
smap <c-j> <Plug>(complete_parameter#goto_next_parameter)

nmap <c-k> <Plug>(complete_parameter#goto_previous_parameter)
imap <c-k> <Plug>(complete_parameter#goto_previous_parameter)
smap <c-k> <Plug>(complete_parameter#goto_previous_parameter)
let g:complete_parameter_log_level = 5
let g:complete_parameter_use_ultisnips_mapping = 0
" need to set noshowmode or set cmdheight=2
let g:complete_parameter_echo_signature = 1

" octol/vim-cpp-enhanced-highlight config
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_experimental_simple_template_highlight = 1
let g:cpp_experimental_template_highlight = 1
let g:cpp_concepts_highlight = 1
let g:cpp_no_function_highlight = 1
"let c_no_curly_error=1
"



"" phpcomplete.vim config
"let g:phpcomplete_mappings = {
"   \ 'jump_to_def': '<C-]>',
"   \ 'jump_to_def_split': '<C-w><C-]>',
"   \ 'jump_to_def_vsplit': '<C-w><C-\>',
"   \ 'jump_to_def_tabnew': '<C-w><C-[>',
"   \}
"
"" phpcomplete_extened config
"" autocmd  FileType  php setlocal omnifunc=phpcomplete_extended#CompletePHP
"let g:phpcomplete_index_composer_command = '/usr/bin/composer'

" phpactor config
"" Set the PHP bin to an additional installation that has no XDEBUG installed
let g:phpactorPhpBin = '/usr/bin/php'
let g:phpactorBranch = 'master'
let g:phpactorOmniAutoClassImport = v:true

autocmd FileType php setlocal omnifunc=phpactor#Complete
let g:phpactorCompletionIgnoreCase = 0
let g:phpactorOmniError = v:true

" Include use statement
nmap <Leader>u :call phpactor#UseAdd()<CR>

" Invoke the context menu
nmap <Leader>mm :call phpactor#ContextMenu()<CR>

" Invoke the navigation menu
nmap <Leader>nn :call phpactor#Navigate()<CR>

" Goto definition of class or class member under the cursor
nmap <Leader>o :call phpactor#GotoDefinition()<CR>
nmap <Leader>vo :call phpactor#GotoDefinitionVsplit()<CR>
nmap <Leader>ho :call phpactor#GotoDefinitionHsplit()<CR>

" Show brief information about the symbol under the cursor
nmap <Leader>K :call phpactor#Hover()<CR>

" Transform the classes in the current file
nmap <Leader>tt :call phpactor#Transform()<CR>

" Generate a new class (replacing the current file)
nmap <Leader>cc :call phpactor#ClassNew()<CR>

" Extract expression (normal mode)
nmap <silent><Leader>ee :call phpactor#ExtractExpression(v:false)<CR>

" Extract expression from selection
vmap <silent><Leader>ee :<C-U>call phpactor#ExtractExpression(v:true)<CR>

" Extract method from selection
vmap <silent><Leader>em :<C-U>call phpactor#ExtractMethod()<CR>
" END


"" ncm2 config
""" Set the PHP bin to an additional installation that has no XDEBUG installed
"let g:phpactorPhpBin = '/usr/bin/php'
"
""" Make ncm2 work automatically
"autocmd BufEnter * call ncm2#enable_for_buffer()
"
""" When autocompleting auto select the first one and do not autoinsert.
"set completeopt=noinsert,menuone
"
""" Enable tab cyle thorought suggestions.
""" ctrl + j: Next item (down).
""" ctrl + k: Previous item (up).
"inoremap <expr> <c-j> pumvisible() ? "\<C-n>" : "\<Tab>"
"inoremap <expr> <c-k> pumvisible() ? "\<C-p>" : "\<S-Tab>"
"
""" When pressing CTRL+u on a suggestion, it will expand with parameters.
"noremap <silent> <expr> <c-x><c-o> ncm2_ultisnips#expand_or("\<CR>", 'n')
"
""" Tab and Shift-Tab will cycle thorough parameters.
"let g:UltiSnipsJumpForwardTrigger="<tab>"
"let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
"" END

""" deoplete-phpactor  config
"let g:deoplete#sources = {}
"let g:deoplete#sources.php = ['omni', 'phpactor', 'ultisnips', 'buffer']
" END
"


""" indentLine config
let g:indentLine_setColors = 0
" Vim
let g:indentLine_color_term = 239

" GVim
let g:indentLine_color_gui = '#A4E57E'

" none X terminal
let g:indentLine_color_tty_light = 7 " (default: 4)
let g:indentLine_color_dark = 1 " (default: 2)

" Background (Vim, GVim)
let g:indentLine_bgcolor_term = 202
let g:indentLine_bgcolor_gui = '#FF5F00'
"let g:indentLine_char = 'c'
let g:indentLine_char_list = ['|', '¦', '┆', '┊']
let g:indentLine_concealcursor = 'inc'
let g:indentLine_conceallevel = 1

""" Emmet Config
let g:user_emmet_mode='n'    "only enable normal mode functions.
let g:user_emmet_mode='inv'  "enable all functions, which is equal to
let g:user_emmet_mode='a'    "enable all function in all mode.
let g:user_emmet_install_global = 1
let g:user_emmet_leader_key='<C-Z>'
autocmd FileType html,css EmmetInstall


""" MaxMEllon/vim-jsx-pretty Config
let g:vim_jsx_pretty_template_tags = ['html', 'jsx']
let g:vim_jsx_pretty_colorful_config = 1 " default 0

" vim-ranbow confin
au FileType php,py,c,java,cpp,objc,objcpp call rainbow#load()
let g:rainbow_active = 1
let g:rainbow_active = 1

let g:rainbow_load_separately = [
    \ [ '*' , [['(', ')'], ['\[', '\]'], ['{', '}']] ],
    \ [ '*.tex' , [['(', ')'], ['\[', '\]']] ],
    \ [ '*.cpp' , [['(', ')'], ['\[', '\]'], ['{', '}']] ],
    \ [ '*.{html,htm}' , [['(', ')'], ['\[', '\]'], ['{', '}'], ['<\a[^>]*>', '</[^>]*>']] ],
    \ ]
